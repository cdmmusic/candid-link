#!/usr/bin/env python3
"""
Companion.global Selenium 자동화 API
Flask 서버로 앨범 검색 요청을 받아 Selenium으로 처리
"""

from flask import Flask, request, jsonify
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import os

app = Flask(__name__)

# Selenium 설정
SELENIUM_HUB = os.environ.get('SELENIUM_HUB', 'http://localhost:4444')

# Companion.global 로그인 정보
COMPANION_USERNAME = os.environ.get('COMPANION_USERNAME', 'candidmusic')
COMPANION_PASSWORD = os.environ.get('COMPANION_PASSWORD', 'dkfvfk2-%!#')

def get_driver():
    """Selenium WebDriver 생성"""
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=1920,1080')

    # Remote WebDriver 사용 (Selenium Hub)
    driver = webdriver.Remote(
        command_executor=SELENIUM_HUB,
        options=chrome_options
    )

    return driver

def login_to_companion(driver):
    """Companion.global (FLUXUS)에 로그인"""
    import sys

    def safe_flush():
        try:
            sys.stdout.flush()
        except (BrokenPipeError, OSError):
            pass

    try:
        print("[Companion API] Starting login process...")
        safe_flush()

        # 로그인 페이지 접속
        driver.get('http://companion.global')
        print(f"[Companion API] Loaded login page: {driver.current_url}")
        safe_flush()

        # Username 입력
        username_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, 'username'))
        )
        username_input.clear()
        username_input.send_keys(COMPANION_USERNAME)
        print(f"[Companion API] Entered username: {COMPANION_USERNAME}")
        safe_flush()

        # Password 입력
        password_input = driver.find_element(By.ID, 'password')
        password_input.clear()
        password_input.send_keys(COMPANION_PASSWORD)
        print("[Companion API] Entered password")
        safe_flush()

        # 로그인 버튼 클릭
        login_button = driver.find_element(By.CSS_SELECTOR, 'button[type="submit"], .btn_login')
        login_button.click()
        print("[Companion API] Clicked login button")
        safe_flush()

        # 로그인 완료 대기 (dashboard 페이지로 리다이렉트 확인)
        time.sleep(5)
        print(f"[Companion API] After login, URL: {driver.current_url}")
        print(f"[Companion API] Page title: {driver.title}")
        safe_flush()

        # 로그인 실패 체크 (error=true가 있거나 여전히 login 페이지면)
        if 'error=true' in driver.current_url or '/login' in driver.current_url:
            print("[Companion API] Login failed - still on login page or error detected")
            safe_flush()
            # DEBUG: Save error page
            with open('/tmp/login_error.html', 'w', encoding='utf-8') as f:
                f.write(driver.page_source)
            print("[Companion API] Saved error page to /tmp/login_error.html")
            return False

        # Dashboard 페이지 확인
        if '/dashboard' in driver.current_url:
            print("[Companion API] Successfully reached dashboard")
        else:
            print(f"[Companion API] Unexpected page after login: {driver.current_url}")

        # DEBUG: Save page source
        with open('/tmp/after_login.html', 'w', encoding='utf-8') as f:
            f.write(driver.page_source)
        print("[Companion API] Saved page source to /tmp/after_login.html")
        safe_flush()

        print("[Companion API] Login successful")
        safe_flush()
        return True

    except Exception as e:
        import traceback
        print(f"[Companion API] Login failed: {str(e)}")
        print(traceback.format_exc())
        safe_flush()
        return False

def search_album(artist, album, upc=''):
    """Companion.global에서 앨범 검색"""
    import sys

    def safe_flush():
        try:
            sys.stdout.flush()
        except (BrokenPipeError, OSError):
            pass

    driver = None

    try:
        driver = get_driver()

        # 로그인
        if not login_to_companion(driver):
            return {
                'success': False,
                'error': 'Login failed',
                'data': None
            }

        # Catalog 페이지로 이동
        print(f"[Companion API] Navigating to catalog page...")
        driver.get('http://companion.global/catalog?init=Y')
        time.sleep(2)
        print(f"[Companion API] Current URL: {driver.current_url}")

        # DEBUG: Save catalog page source
        with open('/tmp/catalog_page.html', 'w', encoding='utf-8') as f:
            f.write(driver.page_source)
        print("[Companion API] Saved catalog page to /tmp/catalog_page.html")
        sys.stdout.flush()

        # 검색창 대기 및 입력
        search_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, 'search_text'))
        )
        print(f"[Companion API] Found search input")
        sys.stdout.flush()

        # 글로벌 플랫폼 검색: CDMA 코드 우선
        # UPC가 있으면 CDMA 코드로 검색, 없으면 앨범명으로 검색
        target_row = None

        # 텍스트 정규화 함수 (공백, 특수문자 제거)
        def normalize_text(text):
            import re
            if not text:
                return ""
            # 공백과 특수문자 제거, 소문자 변환
            return re.sub(r'[\s\-_,.()\[\]{}]+', '', text.lower())

        # CDMA 코드로 검색 (UPC 파라미터 사용)
        search_query = upc if upc else album

        if search_query:
            print(f"[Companion API] Searching by: {search_query} ({'CDMA' if upc else 'Album'})")
            sys.stdout.flush()

            search_input.clear()
            search_input.send_keys(search_query)
            print(f"[Companion API] Entered search query: {search_query}")
            sys.stdout.flush()

            # 검색 버튼 클릭 또는 JavaScript 함수 실행
            try:
                # 방법 1: 검색 버튼 클릭
                search_btn = driver.find_element(By.CSS_SELECTOR, '.btn_sch')
                search_btn.click()
                print(f"[Companion API] Clicked search button")
            except:
                # 방법 2: JavaScript 함수 직접 실행
                driver.execute_script("catalog.search();")
                print(f"[Companion API] Executed catalog.search() via JavaScript")
            sys.stdout.flush()

            time.sleep(3)

            # DEBUG: Save search results
            with open('/tmp/search_results_primary.html', 'w', encoding='utf-8') as f:
                f.write(driver.page_source)

            try:
                album_rows = driver.find_elements(By.CSS_SELECTOR, 'table tbody tr')
                print(f"[Companion API] Found {len(album_rows)} album rows")
                sys.stdout.flush()

                if upc and len(album_rows) > 0:
                    # CDMA 코드로 검색한 경우, UPC/Catalog No 컬럼에서 정확히 매칭되는 행 찾기
                    for row in album_rows:
                        try:
                            tds = row.find_elements(By.TAG_NAME, 'td')
                            if len(tds) > 3:
                                # UPC/Catalog No 컬럼 (index 3)
                                upc_cell = tds[3]
                                upc_text = upc_cell.text.strip()

                                print(f"[Companion API] Checking UPC: {upc_text} vs {upc}")
                                sys.stdout.flush()

                                # CDMA 코드가 포함되어 있는지 확인
                                if upc in upc_text:
                                    print(f"[Companion API] Matched CDMA in UPC column: {upc_text}")
                                    sys.stdout.flush()
                                    target_row = row
                                    break
                        except:
                            continue

                    # 매칭 실패시 첫 번째 결과 사용
                    if not target_row and len(album_rows) > 0:
                        target_row = album_rows[0]
                        print(f"[Companion API] No exact match, using first result for CDMA: {upc}")
                        sys.stdout.flush()
                elif album:
                    # 앨범명으로 검색한 경우, 아티스트명 매칭
                    normalized_artist = normalize_text(artist)
                    for row in album_rows:
                        try:
                            tds = row.find_elements(By.TAG_NAME, 'td')
                            if len(tds) > 1:
                                artist_cell = tds[1]
                                artist_text = artist_cell.text.strip()
                                normalized_row_artist = normalize_text(artist_text)

                                print(f"[Companion API] Checking: {artist_text} vs {artist}")
                                sys.stdout.flush()

                                if not normalized_artist or not normalized_row_artist:
                                    continue

                                if normalized_artist in normalized_row_artist or normalized_row_artist in normalized_artist:
                                    print(f"[Companion API] Matched artist: {artist_text}")
                                    sys.stdout.flush()
                                    target_row = row
                                    break
                        except:
                            continue
            except:
                print(f"[Companion API] No results found")
                sys.stdout.flush()

        # Fallback: 앨범명 검색 실패 시 아티스트명으로 검색
        if not target_row and not upc and artist:
            print(f"[Companion API] Fallback: Searching by artist name: {artist}")
            sys.stdout.flush()

            search_input = driver.find_element(By.ID, 'search_text')
            search_input.clear()
            search_input.send_keys(artist)
            print(f"[Companion API] Entered search query: {artist}")
            sys.stdout.flush()

            from selenium.webdriver.common.keys import Keys
            search_input.send_keys(Keys.RETURN)
            time.sleep(3)

            # DEBUG: Save search results
            with open('/tmp/search_results_fallback.html', 'w', encoding='utf-8') as f:
                f.write(driver.page_source)

            try:
                album_rows = driver.find_elements(By.CSS_SELECTOR, 'table tbody tr')
                print(f"[Companion API] Found {len(album_rows)} album rows")
                sys.stdout.flush()

                normalized_album = normalize_text(album)
                for row in album_rows:
                    try:
                        tds = row.find_elements(By.TAG_NAME, 'td')
                        if len(tds) > 2:
                            album_cell = tds[2]
                            album_text = album_cell.text.strip()
                            normalized_row_album = normalize_text(album_text)

                            print(f"[Companion API] Checking: {album_text} vs {album}")
                            sys.stdout.flush()

                            if not normalized_album or not normalized_row_album:
                                continue

                            if normalized_album in normalized_row_album or normalized_row_album in normalized_album:
                                print(f"[Companion API] Matched album: {album_text}")
                                sys.stdout.flush()
                                target_row = row
                                break
                    except:
                        continue
            except:
                print(f"[Companion API] No results found in fallback")
                sys.stdout.flush()

        # DEBUG: Final search results
        with open('/tmp/search_results.html', 'w', encoding='utf-8') as f:
            f.write(driver.page_source)
        print(f"[Companion API] Current URL after search: {driver.current_url}")
        sys.stdout.flush()

        # 결과 확인
        if not target_row:
            error_msg = f'Album "{album}" by "{artist}" not found in search results'
            print(f"[Companion API] {error_msg}")
            sys.stdout.flush()
            return {
                'success': False,
                'error': error_msg,
                'data': None
            }

        # Smart Link 컬럼에서 링크 찾기 (/catalog/platform/ URL)
        print(f"[Companion API] Looking for Smart Link in the row...")
        sys.stdout.flush()

        tds = target_row.find_elements(By.TAG_NAME, 'td')
        smart_link_url = None

        # /catalog/platform/ 링크 찾기
        for td in tds:
            try:
                links = td.find_elements(By.TAG_NAME, 'a')
                for link in links:
                    href = link.get_attribute('href')
                    if href and '/catalog/platform/' in href:
                        smart_link_url = href
                        print(f"[Companion API] Found platform link: {href}")
                        sys.stdout.flush()
                        break
                if smart_link_url:
                    break
            except:
                continue

        if not smart_link_url:
            print(f"[Companion API] Smart Link not found, trying to click row...")
            sys.stdout.flush()
            # Smart Link를 못 찾으면 행 자체를 클릭
            target_row.click()
            time.sleep(2)
        else:
            print(f"[Companion API] Found Smart Link: {smart_link_url}")
            sys.stdout.flush()
            # 상대 경로를 절대 경로로 변환
            if smart_link_url.startswith('/'):
                smart_link_url = f"http://companion.global{smart_link_url}"
            # Smart Link 페이지로 이동
            print(f"[Companion API] Navigating to: {smart_link_url}")
            sys.stdout.flush()
            driver.get(smart_link_url)
            time.sleep(3)

        # DEBUG: Save smart link page
        with open('/tmp/smart_link_page.html', 'w', encoding='utf-8') as f:
            f.write(driver.page_source)
        print(f"[Companion API] Saved smart link page to /tmp/smart_link_page.html")
        print(f"[Companion API] Current URL: {driver.current_url}")
        sys.stdout.flush()

        # 앨범 커버 추출
        album_cover_url = None
        try:
            cover_img = driver.find_element(By.CSS_SELECTOR, 'img.album-cover, img.cover-image, .album-art img, img[alt*="album"], img[alt*="cover"]')
            album_cover_url = cover_img.get_attribute('src')
            print(f"[Companion API] Found album cover: {album_cover_url}")
        except:
            print(f"[Companion API] Album cover not found")
        sys.stdout.flush()

        # 플랫폼 링크 추출 - onclick 속성에서 파싱
        platforms = []

        # platList 내의 li 요소들을 찾음
        try:
            platform_items = driver.find_elements(By.CSS_SELECTOR, '#platList li')
            print(f"[Companion API] Found {len(platform_items)} platform items in #platList")
            sys.stdout.flush()
        except:
            platform_items = []
            print(f"[Companion API] No #platList found, trying alternative selectors")
            sys.stdout.flush()

        # 중복 제거를 위한 set
        seen_urls = set()

        for item in platform_items:
            try:
                # li 안의 a 태그 찾기
                link = item.find_element(By.TAG_NAME, 'a')
                onclick_attr = link.get_attribute('onclick')

                if not onclick_attr:
                    continue

                # onclick="javascript:click_platform("http://music.apple.com/...", "itm", "...")"
                # 정규식으로 URL과 platform code 추출
                import re
                match = re.search(r'click_platform\(["\']([^"\']+)["\'],\s*["\']([^"\']+)["\']', onclick_attr)
                if not match:
                    continue

                url = match.group(1).replace('\\/', '/')  # 이스케이프된 슬래시 복원
                platform_code = match.group(2)

                if url in seen_urls:
                    continue
                seen_urls.add(url)

                # span 태그에서 플랫폼 이름 추출
                try:
                    span = link.find_element(By.TAG_NAME, 'span')
                    span_class = span.get_attribute('class')
                    # class="logo_itm" -> platform_name from class
                except:
                    span_class = None

                # 플랫폼 이름 매핑
                platform_name = None
                if platform_code == 'spo':
                    platform_name = 'Spotify'
                elif platform_code == 'itm':
                    platform_name = 'Apple Music'
                elif platform_code == 'yat':
                    platform_name = 'YouTube Music'
                elif platform_code == 'ama':
                    platform_name = 'Amazon Music'
                elif platform_code == 'dee':
                    platform_name = 'Deezer'
                elif platform_code == 'asp':
                    platform_name = 'Tidal'
                elif platform_code == 'pdx':
                    platform_name = 'Pandora'
                elif platform_code == 'soc':
                    platform_name = 'SoundCloud'
                elif platform_code == 'awm':
                    platform_name = 'AWA'
                elif platform_code == 'kkb':
                    platform_name = 'KKBOX'
                elif platform_code == 'ang':
                    platform_name = 'Anghami'
                elif platform_code == 'lmj':
                    platform_name = 'LINE MUSIC'
                elif platform_code == 'mov':
                    platform_name = 'MOOV'
                elif platform_code == 'tct':
                    platform_name = 'QQ Music'
                else:
                    platform_name = platform_code.upper()  # Fallback

                platforms.append({
                    'platform': platform_name,
                    'code': platform_code,
                    'url': url,
                    'upc': None  # UPC는 페이지에서 추출 가능하면 추가
                })
                print(f"[Companion API] Added platform: {platform_name} ({platform_code}) - {url}")
                sys.stdout.flush()
            except Exception as e:
                print(f"[Companion API] Error parsing platform element: {str(e)}")
                sys.stdout.flush()
                continue

        print(f"[Companion API] Total platforms extracted: {len(platforms)}")
        sys.stdout.flush()

        return {
            'success': True,
            'data': {
                'album_cover_url': album_cover_url,
                'platform_count': len(platforms),
                'platforms': platforms
            },
            'request': {
                'artist': artist,
                'album': album
            }
        }

    except Exception as e:
        import traceback
        error_msg = f"{str(e)}\n{traceback.format_exc()}"
        print(f"[Companion API] Error: {error_msg}")
        return {
            'success': False,
            'error': error_msg,
            'data': None
        }

    finally:
        if driver:
            driver.quit()

@app.route('/health', methods=['GET'])
def health():
    """헬스 체크"""
    return jsonify({
        'status': 'ok',
        'service': 'companion-api',
        'selenium_hub': SELENIUM_HUB
    })

@app.route('/search', methods=['POST'])
def search():
    """앨범 검색 API"""
    try:
        data = request.get_json()

        if not data:
            return jsonify({
                'success': False,
                'error': 'No JSON data provided'
            }), 400

        artist = data.get('artist', '')
        album = data.get('album', '')
        upc = data.get('upc', '')  # UPC 또는 Catalog No

        # artist + album 또는 upc 중 하나는 있어야 함
        if not ((artist and album) or upc):
            return jsonify({
                'success': False,
                'error': 'Missing required parameters: (artist + album) or upc'
            }), 400

        if upc:
            print(f"[Companion API] Searching by UPC: {upc}")
        else:
            print(f"[Companion API] Searching: {artist} - {album}")

        result = search_album(artist, album, upc)

        if result['success']:
            print(f"[Companion API] Found {result['data']['platform_count']} platforms")
        else:
            print(f"[Companion API] Failed: {result.get('error')}")

        return jsonify(result)

    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    print("Starting Companion API...")
    print(f"Selenium Hub: {SELENIUM_HUB}")
    app.run(host='0.0.0.0', port=5001, debug=False)
