{
  "name": "Album Links Extractor - KR + Global Platforms (Selenium)",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "album-links",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Webhook 데이터 처리 및 검색 URL 생성\nconst webhookData = $json.body || $json;\nconst artist = webhookData.primary_artist || '';\nconst album = webhookData.album_title_ko || '';\n\nif (!artist || !album) {\n  return {\n    error: 'Missing required data',\n    received: webhookData\n  };\n}\n\nconst query = `${artist} ${album}`;\nconst encoded = encodeURIComponent(query);\n\n// 캐시 방지를 위한 타임스탬프 + 랜덤값\nconst cacheBuster = `${Date.now()}_${Math.random().toString(36).substring(7)}`;\n\n// 각 플랫폼별 검색 URL 생성\nconst platforms = [\n  {\n    id: 'melon',\n    name: '멜론',\n    searchUrl: `https://www.melon.com/search/album/index.htm?q=${encoded}&section=&searchGnbYn=Y&kkoSpl=Y&kkoDpType=&_=${cacheBuster}`,\n    usePuppeteer: false,\n    useApi: false\n  },\n  {\n    id: 'genie',\n    name: '지니뮤직',\n    searchUrl: `https://www.genie.co.kr/search/searchAlbum?query=${encoded}&_=${cacheBuster}`,\n    usePuppeteer: false,\n    useApi: false\n  },\n  {\n    id: 'bugs',\n    name: '벅스',\n    searchUrl: `https://music.bugs.co.kr/search/integrated?q=${encoded}&_=${cacheBuster}`,\n    usePuppeteer: false,\n    useApi: false\n  },\n  {\n    id: 'vibe',\n    name: 'VIBE',\n    searchUrl: `https://apis.naver.com/vibeWeb/musicapiweb/v4/searchall?query=${encoded}&sort=RELEVANCE&alDisplay=21`,\n    usePuppeteer: false,\n    useApi: true\n  },\n  {\n    id: 'flo',\n    name: 'FLO',\n    searchUrl: `https://www.music-flo.com/api/search/v2/search?keyword=${encoded}&searchType=ALBUM&sortType=ACCURACY&size=20&page=1`,\n    usePuppeteer: false,\n    useApi: true\n  }\n];\n\nreturn platforms.map(platform => ({\n  ...platform,\n  artist: artist,\n  album: album,\n  query: query\n}));"
      },
      "id": "build_search_urls",
      "name": "Build Search URLs (KR)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "amount": 0.5
      },
      "id": "wait",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.searchUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
            },
            {
              "name": "Accept",
              "value": "application/json, text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "ko-KR,ko;q=0.9,en-US;q=0.8"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Expires",
              "value": "0"
            },
            {
              "name": "Referer",
              "value": "https://vibe.naver.com/"
            },
            {
              "name": "Origin",
              "value": "https://vibe.naver.com"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "text",
              "fullResponse": false
            }
          },
          "timeout": 15000,
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 10
            }
          }
        }
      },
      "id": "http_request",
      "name": "HTTP Request (KR)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "continueOnFail": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "merge",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// HTML/API 응답 파싱하여 앨범 링크 추출\nconst platform = $json.id;\nconst responseData = $json.data || $json.body || $json.response || '';\nconst targetArtist = $json.artist;\nconst targetAlbum = $json.album;\nconst useApi = $json.useApi;\n\n// 아티스트명 정규화 함수\nfunction normalizeText(text) {\n  return text.toLowerCase().replace(/[\\s\\(\\)\\[\\]]/g, '').replace(/[^a-z0-9가-힣]/g, '');\n}\n\nlet albumUrl = null;\nlet albumId = null;\n\n// API 응답 처리 (FLO, VIBE)\nif (useApi && (platform === 'flo' || platform === 'vibe')) {\n  try {\n    let jsonData;\n    if (typeof responseData === 'string') {\n      jsonData = JSON.parse(responseData);\n    } else {\n      jsonData = responseData;\n    }\n\n    if (platform === 'flo') {\n      if (jsonData.data && jsonData.data.list && jsonData.data.list.length > 0) {\n        const albumList = jsonData.data.list[0];\n        if (albumList.type === 'ALBUM' && albumList.list && albumList.list.length > 0) {\n          const firstAlbum = albumList.list[0];\n          albumId = firstAlbum.id.toString();\n          albumUrl = `https://www.music-flo.com/detail/album/${albumId}`;\n        }\n      }\n    } else if (platform === 'vibe') {\n      if (jsonData.response && jsonData.response.result) {\n        const result = jsonData.response.result;\n        if (result.trackResult && result.trackResult.tracks && result.trackResult.tracks.length > 0) {\n          const firstTrack = result.trackResult.tracks[0];\n          if (firstTrack.album) {\n            albumId = firstTrack.album.albumId.toString();\n            albumUrl = `https://vibe.naver.com/album/${albumId}`;\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(`API parsing error for ${platform}: ${error.message}`);\n  }\n\n} else {\n  // 일반 HTML 파싱 (멜론, 지니, 벅스)\n  let html = '';\n  if (typeof responseData === 'string') {\n    html = responseData;\n  } else if (responseData && typeof responseData === 'object') {\n    html = JSON.stringify(responseData);\n  }\n\n  if (html.length < 1000) {\n    return {\n      platform_id: platform,\n      platform_name: $json.name,\n      error: 'Invalid response data',\n      found: false\n    };\n  }\n\n  if (platform === 'melon') {\n    const melonPatterns = [\n      /goAlbumDetail\\(['\"]([0-9]+)['\"]\\)/,\n      /albumId=([0-9]+)/,\n    ];\n\n    for (const pattern of melonPatterns) {\n      const match = html.match(pattern);\n      if (match) {\n        albumId = match[1];\n        albumUrl = `https://www.melon.com/album/detail.htm?albumId=${albumId}`;\n        break;\n      }\n    }\n  } else if (platform === 'genie') {\n    const normalizedTarget = normalizeText(targetArtist);\n    const normalizedAlbum = normalizeText(targetAlbum);\n\n    const albumIdPattern = /fnViewAlbumLayer\\(['\"]?([0-9]+)['\"]?\\)/g;\n    const allMatches = [];\n    let match;\n\n    while ((match = albumIdPattern.exec(html)) !== null) {\n      const id = match[1];\n      const startPos = Math.max(0, match.index - 500);\n      const endPos = Math.min(html.length, match.index + 500);\n      const context = html.substring(startPos, endPos);\n      allMatches.push({ id, context });\n    }\n\n    for (const item of allMatches) {\n      const contextNormalized = normalizeText(item.context);\n      const hasArtist = contextNormalized.includes(normalizedTarget);\n      const hasAlbum = contextNormalized.includes(normalizedAlbum);\n\n      if (hasArtist && hasAlbum) {\n        albumId = item.id;\n        albumUrl = `https://www.genie.co.kr/detail/albumInfo?axnm=${albumId}`;\n        break;\n      }\n\n      if (!albumId && hasArtist) {\n        albumId = item.id;\n        albumUrl = `https://www.genie.co.kr/detail/albumInfo?axnm=${albumId}`;\n      }\n    }\n\n    if (!albumId && allMatches.length > 0) {\n      albumId = allMatches[0].id;\n      albumUrl = `https://www.genie.co.kr/detail/albumInfo?axnm=${albumId}`;\n    }\n  } else if (platform === 'bugs') {\n    const normalizedTarget = normalizeText(targetArtist);\n    const normalizedAlbum = normalizeText(targetAlbum);\n\n    const albumIdPattern = /\\/album\\/(\\d+)/g;\n    const allMatches = [];\n    let match;\n\n    while ((match = albumIdPattern.exec(html)) !== null) {\n      const id = match[1];\n      const startPos = Math.max(0, match.index - 500);\n      const endPos = Math.min(html.length, match.index + 500);\n      const context = html.substring(startPos, endPos);\n      allMatches.push({ id, context });\n    }\n\n    for (const item of allMatches) {\n      const contextNormalized = normalizeText(item.context);\n      const hasArtist = contextNormalized.includes(normalizedTarget);\n      const hasAlbum = contextNormalized.includes(normalizedAlbum);\n\n      if (hasArtist && hasAlbum) {\n        albumId = item.id;\n        albumUrl = `https://music.bugs.co.kr/album/${albumId}`;\n        break;\n      }\n\n      if (!albumId && hasArtist) {\n        albumId = item.id;\n        albumUrl = `https://music.bugs.co.kr/album/${albumId}`;\n      }\n    }\n\n    if (!albumId && allMatches.length > 0) {\n      albumId = allMatches[0].id;\n      albumUrl = `https://music.bugs.co.kr/album/${albumId}`;\n    }\n  }\n}\n\n// 결과 반환\nif (albumUrl) {\n  return {\n    platform_id: platform,\n    platform_name: $json.name,\n    artist: targetArtist,\n    album: targetAlbum,\n    album_url: albumUrl,\n    album_id: albumId,\n    found: true,\n    status: 'success'\n  };\n} else {\n  return {\n    platform_id: platform,\n    platform_name: $json.name,\n    artist: targetArtist,\n    album: targetAlbum,\n    album_url: null,\n    found: false,\n    status: 'not_found'\n  };\n}\n"
      },
      "id": "parse_html",
      "name": "Parse HTML (KR)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Webhook 데이터에서 Companion API용 데이터 준비 (한글 우선)\nconst webhookData = $json.body || $json;\nconst artistKo = webhookData.primary_artist || webhookData.primary_artist_en || '';\nconst albumKo = webhookData.album_title_ko || webhookData.album_title_en || '';\n\nif (!albumKo) {\n  return {\n    error: 'Missing album title',\n    received: webhookData\n  };\n}\n\nreturn {\n  album: albumKo,\n  artist: artistKo,\n  original_data: webhookData\n};"
      },
      "id": "prepare_companion_request",
      "name": "Prepare Companion Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 600],
      "notes": "Companion API 요청 데이터 준비"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://companion-api:5001/search",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"album\": $json.album, \"artist\": $json.artist } }}",
        "options": {
          "timeout": 90000
        }
      },
      "id": "call_companion_api",
      "name": "Call Companion API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 600],
      "notes": "Selenium 기반 Companion.global 자동화 API 호출"
    },
    {
      "parameters": {
        "jsCode": "// Companion API 응답을 n8n 워크플로우 형식으로 변환\nconst response = $json;\n\nif (!response.success || !response.data) {\n  return {\n    platform_id: 'global',\n    platform_name: 'Global Platforms',\n    found: false,\n    error: response.error || 'Failed to fetch platform links',\n    platforms: {},\n    album_cover_url: null,\n    summary: {\n      total: 0,\n      found: 0,\n      not_found: 0\n    },\n    status: 'error'\n  };\n}\n\nconst data = response.data;\nconst platforms = {};\n\n// Companion API 응답의 platforms 배열을 객체 형식으로 변환\nfor (const platform of data.platforms) {\n  platforms[platform.code] = {\n    name: platform.platform,\n    url: platform.url,\n    upc: platform.upc,\n    found: true\n  };\n}\n\nreturn {\n  platform_id: 'global',\n  platform_name: 'Global Platforms',\n  artist: response.request.artist,\n  album: response.request.album,\n  found: data.platform_count > 0,\n  platforms: platforms,\n  album_cover_url: data.album_cover_url || null,\n  summary: {\n    total: data.platform_count,\n    found: data.platform_count,\n    not_found: 0\n  },\n  status: 'success'\n};"
      },
      "id": "transform_api_response",
      "name": "Transform API Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 600],
      "notes": "Companion API 응답을 워크플로우 형식으로 변환"
    },
    {
      "parameters": {
        "mode": "append",
        "options": {}
      },
      "id": "merge_all_platforms",
      "name": "Merge All Platforms",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [1450, 450]
    },
    {
      "parameters": {
        "jsCode": "// 모든 플랫폼 결과 수집 및 최종 응답 생성\nconst allItems = $input.all();\n\nconsole.log(`========== AGGREGATE RESULTS DEBUG ==========`);\nconsole.log(`Total items received: ${allItems.length}`);\n\nconst results = {\n  success: true,\n  request: {\n    artist: '',\n    album: ''\n  },\n  kr_platforms: {},\n  global_platforms: {},\n  album_cover_url: null,\n  summary: {\n    kr_total: 0,\n    kr_found: 0,\n    kr_not_found: 0,\n    global_total: 0,\n    global_found: 0,\n    global_not_found: 0\n  },\n  timestamp: new Date().toISOString(),\n  debug_info: {\n    total_items: allItems.length,\n    item_keys: []\n  }\n};\n\n// 모든 아이템 처리\nfor (let i = 0; i < allItems.length; i++) {\n  const item = allItems[i];\n  const data = item.json;\n  \n  console.log(`\\n--- Item ${i+1}/${allItems.length} ---`);\n  console.log(`Keys: ${Object.keys(data).join(', ')}`);\n  console.log(`platform_id: ${data.platform_id}`);\n  console.log(`platform_name: ${data.platform_name}`);\n  console.log(`artist: ${data.artist}`);\n  console.log(`album: ${data.album}`);\n  \n  results.debug_info.item_keys.push(Object.keys(data));\n  \n  // Request 정보 설정 (첫 번째 아이템에서)\n  if (!results.request.artist && data.artist) {\n    results.request.artist = data.artist;\n    results.request.album = data.album;\n  }\n  \n  if (data.platform_id === 'global') {\n    // Global 플랫폼 결과\n    console.log('→ Processing as GLOBAL platform');\n    results.global_platforms = data.platforms || {};\n    \n    // 앨범 커버 URL 저장 (Companion.global에서)\n    if (data.album_cover_url) {\n      results.album_cover_url = data.album_cover_url;\n      console.log(`→ Album cover from Companion: ${data.album_cover_url}`);\n    }\n    \n    if (data.summary) {\n      results.summary.global_total = data.summary.total;\n      results.summary.global_found = data.summary.found;\n      results.summary.global_not_found = data.summary.not_found;\n    }\n  } else if (data.platform_id) {\n    // KR 플랫폼 결과\n    console.log(`→ Processing as KR platform: ${data.platform_id}`);\n    results.kr_platforms[data.platform_id] = {\n      name: data.platform_name,\n      album_url: data.album_url,\n      album_id: data.album_id,\n      found: data.found,\n      status: data.status\n    };\n    \n    results.summary.kr_total++;\n    if (data.found) {\n      results.summary.kr_found++;\n    } else {\n      results.summary.kr_not_found++;\n    }\n  } else {\n    console.log(`→ WARNING: Item has no platform_id!`);\n  }\n}\n\n// 앨범 커버 Fallback: Companion에 없으면 벅스에서 가져오기\nif (!results.album_cover_url) {\n  let albumId = null;\n  \n  // bugs platform에서 album_id 가져오기\n  if (results.kr_platforms.bugs && results.kr_platforms.bugs.album_id) {\n    albumId = results.kr_platforms.bugs.album_id;\n  } \n  // album_id가 없으면 URL에서 추출\n  else if (results.kr_platforms.bugs && results.kr_platforms.bugs.album_url) {\n    const match = results.kr_platforms.bugs.album_url.match(/\\/album\\/(\\d+)/);\n    if (match && match[1]) {\n      albumId = match[1];\n    }\n  }\n  \n  // 벅스 이미지 URL 생성: 앨범ID의 앞 6자리를 폴더명으로 사용\n  if (albumId && albumId.length >= 6) {\n    const folder = albumId.substring(0, 6);\n    results.album_cover_url = `https://image.bugsm.co.kr/album/images/500/${folder}/${albumId}.jpg`;\n    console.log(`→ Album cover from Bugs: ${results.album_cover_url}`);\n  }\n}\n\nconsole.log(`\\n========== FINAL RESULTS ==========`);\nconsole.log(`KR platforms: ${results.summary.kr_total}`);\nconsole.log(`Global platforms: ${results.summary.global_total}`);\nconsole.log(`Album cover: ${results.album_cover_url || 'None'}`);\nconsole.log(`==========================================\\n`);\n\nreturn results;"
      },
      "id": "aggregate_results",
      "name": "Aggregate Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 450]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:5002/save",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "save_to_db",
      "name": "Save to DB",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1850, 450],
      "notes": "SQLite DB에 앨범 링크 저장"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Build Search URLs (KR)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Companion Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Search URLs (KR)": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request (KR)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request (KR)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Parse HTML (KR)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse HTML (KR)": {
      "main": [
        [
          {
            "node": "Merge All Platforms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Companion Request": {
      "main": [
        [
          {
            "node": "Call Companion API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Companion API": {
      "main": [
        [
          {
            "node": "Transform API Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform API Response": {
      "main": [
        [
          {
            "node": "Merge All Platforms",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge All Platforms": {
      "main": [
        [
          {
            "node": "Aggregate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Results": {
      "main": [
        [
          {
            "node": "Save to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
